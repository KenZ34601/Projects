---------------------------------------------------------------------
-- CAS CS 320, Fall 2015
-- Assignment 4
-- Tree.hs
-- Ken(Quan) Zhou

module Tree where

data Tree =
    Leaf
  | Twig
  | Branch Tree Tree Tree
  deriving (Eq, Show)
-- 3(b)
twigs :: Tree -> Integer
twigs (Leaf) = 0
twigs (Twig) = 1
twigs (Branch x y z) = twigs x + twigs y + twigs z
-- 3(c)
branches :: Tree -> Integer
branches (Leaf) = 0
branches (Twig) = 0
branches (Branch x y z) = 1 + branches x + branches y + branches z
--3(d)
width :: Tree -> Integer
width (Leaf) = 1
width (Twig) = 1
width (Branch x y z) = width x + width y + width z
-- 3(e)
perfect :: Tree -> Bool
perfect (Leaf) = False
perfect (Twig) = False
perfect (Branch Leaf Leaf Leaf) = True
perfect (Branch x y z) = perfect x && perfect y && perfect z
-- 3(f)
-- create a helper function 
depth :: Tree -> Integer
depth (Leaf) = 0
depth (Twig) = 0
depth (Branch x y z) = 1 + maximum [depth (x), depth (y), depth(z)]

degenerate :: Tree -> Bool
degenerate (t)
  | width (t) == 2 * (depth (t) - 1) + 3 = True
  | otherwise = False 
-- 3(g)
infinite :: Tree
infinite = Branch Leaf infinite Leaf

-- Interpret.hs

type Value = Integer
type Output = [Value]

data Term =
    Number Integer
  | Plus Term Term
  | Mult Term Term
  | Exponent Term Term
  | Max Term Term
  | Min Term Term
  deriving (Eq, Show)
data Stmt =
    Print Term Stmt
  | End
  deriving (Show)
-- 4 (a)
evaluate :: Term -> Value
evaluate (Number a) = a
evaluate (Plus t1 t2) = evaluate t1 + evaluate t2
evaluate (Mult t1 t2) = evaluate t1 * evaluate t2
evaluate (Exponent t1 t2) = evaluate t1 ^ (evaluate t2)
evaluate (Max t1 t2) = if evaluate t1 > evaluate t2 then evaluate t1 else evaluate t2
evaluate (Min t1 t2) = if evaluate t1 > evaluate t2 then evaluate t2 else evaluate t1
evaluate _ = 0
-- 4 (b)

execute :: Stmt -> Output
execute (End) = []
execute (Print t s) = [evaluate t] ++ execute s 
execute _ = [0]

--test case:
--Print (Mult (Number 4) (Max (Number 3) (Plus (Number (-1)) (Number (-2))))) End
--Print (Plus (Number 1) (Number 2)) End
--eof
--eof
